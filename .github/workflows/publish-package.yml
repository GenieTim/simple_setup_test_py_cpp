name: Publish Different Version to PyPi
# inspired partially by https://github.com/ansible/pylibssh/blob/206c222ee8ee2cdb2b5dc9b95125f7f3d27d32bc/.github/workflows/build-test-n-publish.yml

on:
  push:
    tags:
      - "v*"

jobs:
  build-windows:
    runs-on: windows-latest

    name: Build üì¶ for Windows and üêç ${{ matrix.python-version }}
    strategy:
      matrix:
        python-version:
          - "3.10"
          - 3.9
          - 3.8

    steps:
      - uses: actions/checkout@v3
        with: 
          submodules: "recursive"

      - name: Set up Python
        uses:  actions/setup-python@v4
        with:
          cache: 'pip'
          python-version: ${{ matrix.python-version }}

      - uses: actions/cache@v2
        with:
          path: |
            ~\AppData\Local\pip\Cache
            ~\AppData\Local\Temp\chocolatey
            .\vendor\igraph
            .\vendor\nlopt
            .\_skbuild
          key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ matrix.python-version }}-

      - name: Install Dependencies
        run: pip install -r requirements.txt

      - name: Add msbuild to PATH
        uses: microsoft/setup-msbuild@v1.1

      - name: Install choco dependencies
        uses: crazy-max/ghaction-chocolatey@v2
        with:
          args: install -y winflexbison3 eigen

      - name: Build
        run: python -m build --wheel

      - name: Store the build
        uses: actions/upload-artifact@v2
        with:
          name: python-package-distributions
          path: dist
          retention-days: 3

  build-osx:
    runs-on: macos-latest
    name: Build üì¶ for MacOS and üêç ${{ matrix.python-version }}
    strategy:
      matrix:
        python-version:
          # NOTE: https://github.com/MacPython/wiki/wiki/Spinning-wheels
          - "3.10"
          - 3.9
          - 3.8

    steps:
      - uses: actions/checkout@v3
        with: 
          submodules: "recursive"

      - name: Set up Python
        uses:  actions/setup-python@v4
        with:
          cache: 'pip'
          python-version: ${{ matrix.python-version }}

      - uses: actions/cache@v2
        with:
          path: |
            ~/Library/Caches/pip
            ./vendor/igraph
            ./_skbuild
          key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ matrix.python-version }}-

      - name: Install Dependencies
        run: pip install -r requirements.txt

      - name: Install additional dependencies
        run: brew install bison flex

      - name: Build
        run: ./bin/build-wheel.sh

      - name: Store the build
        uses: actions/upload-artifact@v2
        with:
          name: python-package-distributions
          path: dist
          retention-days: 3

  build-linux:
    runs-on: ubuntu-latest
    name: Build üì¶ for ManyLinux

    steps:
      - uses: actions/checkout@v3
        with: 
          submodules: "recursive"

      - name: Set up Python
        uses:  actions/setup-python@v4
        with:
          cache: 'pip'
          python-version: "3.10"

      - uses: actions/cache@v2
        with:
          path: |
            ~/.cache/pip
            ./vendor/igraph
            ./_skbuild
          key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ matrix.python-version }}-

      - name: Install Dependencies
        run: pip install -r requirements.txt

      - name: Build manylinux Python wheels
        uses: RalfG/python-wheels-manylinux-build@v0.5.0
        with:
          python-versions: "cp38-cp38 cp39-cp39 cp310-cp310"
          build-requirements: "cython numpy scikit-build pybind11 cmake ninja wheel"
          system-packages: "bison flex"

      - name: Store the build
        uses: actions/upload-artifact@v2
        with:
          name: python-package-distributions
          path: dist
          retention-days: 3

  build-sdist:
    runs-on: ubuntu-latest
    name: Build SRC Package for Any

    steps:
      - uses: actions/checkout@v3
        with: 
          submodules: "recursive"

      - name: Set up Python
        uses:  actions/setup-python@v4
        with:
          cache: 'pip'
          python-version: "3.10"

      - name: Install Dependencies
        run: pip install -r requirements.txt

      - name: Build Sdist
        run: ./bin/build-sdist.sh

      - name: Store the build
        uses: actions/upload-artifact@v2
        with:
          name: python-package-distributions
          path: dist
          retention-days: 3

  deploy:
    runs-on: ubuntu-latest
    name: Publish üêçüì¶ to PyPI
    needs:
      - build-windows
      - build-osx
      - build-linux
      - build-sdist
    steps:
      - name: Download all the dists
        uses: actions/download-artifact@v2
        with:
          name: python-package-distributions
          path: dist/
      - name: List and delete invalid packages
        run: |
          ls dist/*-linux_*
          rm dist/*-linux_*
      - name: Publish a Python distribution to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}
          skip_existing: true

  github_release:
    runs-on: ubuntu-latest
    name: Create GitHub Release
    needs:
      - build-windows
      - build-osx
      - build-linux
      - build-sdist

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Get tag
        uses: actions-ecosystem/action-get-latest-tag@v1
        id: get_version
        with:
          semver_only: true

      - name: Determine Changelog
        id: changelog_determiner
        run: echo "##[set-output name=changelog;]$(./bin/extract-changelog.sh CHANGELOG.md ${{ steps.get_version.outputs.tag }})"

      - name: Create Release
        id: create_release
        if: success()
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body: ${{ steps.changelog_determiner.outputs.changelog }}
          draft: false
          prerelease: false

      - name: Download all the dists
        uses: actions/download-artifact@v2
        with:
          name: python-package-distributions
          path: dist/

      - name: Upload Release
        id: upload_release
        if: success()
        uses: csexton/release-asset-action@v2
        with:
          pattern: "dist/*.*"
          github-token: ${{ secrets.GITHUB_TOKEN }}
          release-url: ${{ steps.create_release.outputs.upload_url }}
